{
<<<<<<< HEAD
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6d9a60b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.datasets import fetch_california_housing\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.model_selection import train_test_split, cross_validate, ShuffleSplit, cross_val_score, validation_curve\n",
    "from sklearn.model_selection import learning_curve"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5c9f2f4",
   "metadata": {},
   "source": [
    "### California Hoising Dataset - Overfitting and underfitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2abcdbcb",
   "metadata": {},
   "outputs": [
=======
  "cells": [
>>>>>>> 90353a69f53961855bc0113be440f31dbff68744
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6d9a60b2",
      "metadata": {
        "id": "6d9a60b2"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import fetch_california_housing\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "from sklearn.model_selection import train_test_split, cross_validate, ShuffleSplit, cross_val_score, validation_curve"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c5c9f2f4",
      "metadata": {
        "id": "c5c9f2f4"
      },
      "source": [
        "### California Hoising Dataset - Overfitting and underfitting"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2abcdbcb",
      "metadata": {
        "id": "2abcdbcb",
        "outputId": "21bfb890-6885-4192-e006-9d8362be23d9"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MedInc</th>\n",
              "      <th>HouseAge</th>\n",
              "      <th>AveRooms</th>\n",
              "      <th>AveBedrms</th>\n",
              "      <th>Population</th>\n",
              "      <th>AveOccup</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>8.3252</td>\n",
              "      <td>41.0</td>\n",
              "      <td>6.984127</td>\n",
              "      <td>1.023810</td>\n",
              "      <td>322.0</td>\n",
              "      <td>2.555556</td>\n",
              "      <td>37.88</td>\n",
              "      <td>-122.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8.3014</td>\n",
              "      <td>21.0</td>\n",
              "      <td>6.238137</td>\n",
              "      <td>0.971880</td>\n",
              "      <td>2401.0</td>\n",
              "      <td>2.109842</td>\n",
              "      <td>37.86</td>\n",
              "      <td>-122.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.2574</td>\n",
              "      <td>52.0</td>\n",
              "      <td>8.288136</td>\n",
              "      <td>1.073446</td>\n",
              "      <td>496.0</td>\n",
              "      <td>2.802260</td>\n",
              "      <td>37.85</td>\n",
              "      <td>-122.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5.6431</td>\n",
              "      <td>52.0</td>\n",
              "      <td>5.817352</td>\n",
              "      <td>1.073059</td>\n",
              "      <td>558.0</td>\n",
              "      <td>2.547945</td>\n",
              "      <td>37.85</td>\n",
              "      <td>-122.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.8462</td>\n",
              "      <td>52.0</td>\n",
              "      <td>6.281853</td>\n",
              "      <td>1.081081</td>\n",
              "      <td>565.0</td>\n",
              "      <td>2.181467</td>\n",
              "      <td>37.85</td>\n",
              "      <td>-122.25</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n",
              "0  8.3252      41.0  6.984127   1.023810       322.0  2.555556     37.88   \n",
              "1  8.3014      21.0  6.238137   0.971880      2401.0  2.109842     37.86   \n",
              "2  7.2574      52.0  8.288136   1.073446       496.0  2.802260     37.85   \n",
              "3  5.6431      52.0  5.817352   1.073059       558.0  2.547945     37.85   \n",
              "4  3.8462      52.0  6.281853   1.081081       565.0  2.181467     37.85   \n",
              "\n",
              "   Longitude  \n",
              "0    -122.23  \n",
              "1    -122.22  \n",
              "2    -122.24  \n",
              "3    -122.25  \n",
              "4    -122.25  "
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Reading data\n",
        "housing = fetch_california_housing(as_frame=True)\n",
        "data, target = housing.data, housing.target\n",
        "data.head()"
      ]
    },
    {
<<<<<<< HEAD
     "data": {
      "text/plain": [
       "0    452.6\n",
       "1    358.5\n",
       "2    352.1\n",
       "3    341.3\n",
       "4    342.2\n",
       "Name: MedHouseVal, dtype: float64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Target changed to $Thoushands\n",
    "target = target * 100\n",
    "target.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6bac8924",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Regressor average error: 0.000\n"
     ]
    }
   ],
   "source": [
    "#Using DecisionTreeRegressor for the model\n",
    "regressor = DecisionTreeRegressor(random_state=0)\n",
    "regressor.fit(data, target)\n",
    "pred = regressor.predict(data)\n",
    "\n",
    "#Testing on same training data - Errpr should be Zero\n",
    "score = mean_absolute_error(target, pred)\n",
    "print(f'Regressor average error: {score:.3f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4c9cd261",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Regressor average error on training set: 0.000\n",
      "Regressor average error on test set: $47.28K\n"
     ]
    }
   ],
   "source": [
    "#Spliting data\n",
    "X_train, X_test, y_train, y_test = train_test_split(data, target, random_state=0)\n",
    "regressor.fit(X_train, y_train)\n",
    "\n",
    "# Zero error on training set - Should be Zero\n",
    "pred = regressor.predict(X_train)\n",
    "score = mean_absolute_error(y_train, pred)\n",
    "print(f'Regressor average error on training set: {score:.3f}')\n",
    "\n",
    "# Error on test set\n",
    "pred = regressor.predict(X_test)\n",
    "score = mean_absolute_error(y_test, pred)\n",
    "print(f'Regressor average error on test set: ${score:.2f}K')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "963c709e",
   "metadata": {},
   "source": [
    "### Crossvalidation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "071864df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fit_time</th>\n",
       "      <th>score_time</th>\n",
       "      <th>test_score</th>\n",
       "      <th>test_error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.106414</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-46.909797</td>\n",
       "      <td>46.909797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.100302</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-46.421170</td>\n",
       "      <td>46.421170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.100273</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-47.411089</td>\n",
       "      <td>47.411089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.100235</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-44.319824</td>\n",
       "      <td>44.319824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.100288</td>\n",
       "      <td>0.015648</td>\n",
       "      <td>-47.607875</td>\n",
       "      <td>47.607875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.084632</td>\n",
       "      <td>0.015649</td>\n",
       "      <td>-45.901300</td>\n",
       "      <td>45.901300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.100249</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-46.572767</td>\n",
       "      <td>46.572767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.110342</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-46.194585</td>\n",
       "      <td>46.194585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.090268</td>\n",
       "      <td>0.015614</td>\n",
       "      <td>-45.590236</td>\n",
       "      <td>45.590236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.100261</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-45.727998</td>\n",
       "      <td>45.727998</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fit_time  score_time  test_score  test_error\n",
       "0  0.106414    0.000000  -46.909797   46.909797\n",
       "1  0.100302    0.000000  -46.421170   46.421170\n",
       "2  0.100273    0.000000  -47.411089   47.411089\n",
       "3  0.100235    0.000000  -44.319824   44.319824\n",
       "4  0.100288    0.015648  -47.607875   47.607875\n",
       "5  0.084632    0.015649  -45.901300   45.901300\n",
       "6  0.100249    0.000000  -46.572767   46.572767\n",
       "7  0.110342    0.000000  -46.194585   46.194585\n",
       "8  0.090268    0.015614  -45.590236   45.590236\n",
       "9  0.100261    0.000000  -45.727998   45.727998"
=======
      "cell_type": "code",
      "execution_count": null,
      "id": "1d02422f",
      "metadata": {
        "id": "1d02422f",
        "outputId": "d45aafff-b51f-4580-b533-4f4342a3a2e6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0    452.6\n",
              "1    358.5\n",
              "2    352.1\n",
              "3    341.3\n",
              "4    342.2\n",
              "Name: MedHouseVal, dtype: float64"
            ]
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Target changed to $Thoushands\n",
        "target = target * 100\n",
        "target.head()"
>>>>>>> 90353a69f53961855bc0113be440f31dbff68744
      ]
    },
    {
<<<<<<< HEAD
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
=======
      "cell_type": "code",
      "execution_count": null,
      "id": "6bac8924",
      "metadata": {
        "id": "6bac8924",
        "outputId": "851daee2-f0de-40a6-e550-16d17bfb276c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Regressor average error: 0.000\n"
          ]
        }
      ],
      "source": [
        "#Using DecisionTreeRegressor for the model\n",
        "regressor = DecisionTreeRegressor(random_state=0)\n",
        "regressor.fit(data, target)\n",
        "pred = regressor.predict(data)\n",
        "\n",
        "#Testing on same training data - Errpr should be Zero\n",
        "score = mean_absolute_error(target, pred)\n",
        "print(f'Regressor average error: {score:.3f}')"
>>>>>>> 90353a69f53961855bc0113be440f31dbff68744
      ]
    },
    {
<<<<<<< HEAD
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot target distribution\n",
    "target.plot.hist(bins=20, edgecolor='black')\n",
    "plt.xlabel('Median House Value in ($K)')\n",
    "_ = plt.title('Target Distribution')\n",
    "print(f'Standard deviation of Target distribution: ${target.std():.2f}K')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0c6f22d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'fit_time': array([0.13148355, 0.13802528, 0.13154769, 0.11589289, 0.13155627]), 'score_time': array([0.01562572, 0.        , 0.        , 0.        , 0.        ]), 'estimator': [DecisionTreeRegressor(random_state=0), DecisionTreeRegressor(random_state=0), DecisionTreeRegressor(random_state=0), DecisionTreeRegressor(random_state=0), DecisionTreeRegressor(random_state=0)], 'test_score': array([0.26291527, 0.41947109, 0.44492564, 0.23357874, 0.40788361])}\n"
     ]
=======
      "cell_type": "code",
      "execution_count": null,
      "id": "4c9cd261",
      "metadata": {
        "id": "4c9cd261",
        "outputId": "a2155718-72af-4d91-eb12-ed43f571a67a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Regressor average error on training set: 0.000\n",
            "Regressor average error on test set: $47.28K\n"
          ]
        }
      ],
      "source": [
        "#Spliting data\n",
        "X_train, X_test, y_train, y_test = train_test_split(data, target, random_state=0)\n",
        "regressor.fit(X_train, y_train)\n",
        "\n",
        "# Zero error on training set - Should be Zero\n",
        "pred = regressor.predict(X_train)\n",
        "score = mean_absolute_error(y_train, pred)\n",
        "print(f'Regressor average error on training set: {score:.3f}')\n",
        "\n",
        "# Error on test set\n",
        "pred = regressor.predict(X_test)\n",
        "score = mean_absolute_error(y_test, pred)\n",
        "print(f'Regressor average error on test set: ${score:.2f}K')"
      ]
>>>>>>> 90353a69f53961855bc0113be440f31dbff68744
    },
    {
      "cell_type": "markdown",
      "id": "963c709e",
      "metadata": {
        "id": "963c709e"
      },
      "source": [
        "### Crossvalidation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "071864df",
      "metadata": {
        "id": "071864df",
        "outputId": "8ad131a7-e30d-4fae-9d77-f8b8b60a152a"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fit_time</th>\n",
              "      <th>score_time</th>\n",
              "      <th>test_score</th>\n",
              "      <th>test_error</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.100497</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-46.909797</td>\n",
              "      <td>46.909797</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.113936</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-46.421170</td>\n",
              "      <td>46.421170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.110135</td>\n",
              "      <td>0.003001</td>\n",
              "      <td>-47.411089</td>\n",
              "      <td>47.411089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.099395</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-44.319824</td>\n",
              "      <td>44.319824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.105230</td>\n",
              "      <td>0.004569</td>\n",
              "      <td>-47.607875</td>\n",
              "      <td>47.607875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.093188</td>\n",
              "      <td>0.010128</td>\n",
              "      <td>-45.901300</td>\n",
              "      <td>45.901300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.100881</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-46.572767</td>\n",
              "      <td>46.572767</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.101216</td>\n",
              "      <td>0.007832</td>\n",
              "      <td>-46.194585</td>\n",
              "      <td>46.194585</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.099962</td>\n",
              "      <td>0.002048</td>\n",
              "      <td>-45.590236</td>\n",
              "      <td>45.590236</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.099045</td>\n",
              "      <td>0.012083</td>\n",
              "      <td>-45.727998</td>\n",
              "      <td>45.727998</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   fit_time  score_time  test_score  test_error\n",
              "0  0.100497    0.000000  -46.909797   46.909797\n",
              "1  0.113936    0.000000  -46.421170   46.421170\n",
              "2  0.110135    0.003001  -47.411089   47.411089\n",
              "3  0.099395    0.000000  -44.319824   44.319824\n",
              "4  0.105230    0.004569  -47.607875   47.607875\n",
              "5  0.093188    0.010128  -45.901300   45.901300\n",
              "6  0.100881    0.000000  -46.572767   46.572767\n",
              "7  0.101216    0.007832  -46.194585   46.194585\n",
              "8  0.099962    0.002048  -45.590236   45.590236\n",
              "9  0.099045    0.012083  -45.727998   45.727998"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Cross-Validation\n",
        "cv = ShuffleSplit(n_splits=40, test_size=0.3, random_state=0)\n",
        "cv_res = cross_validate(regressor, data, target, cv=cv, scoring='neg_mean_absolute_error')\n",
        "cv_res = pd.DataFrame(cv_res)\n",
        "cv_res['test_error'] = -1 * cv_res.test_score\n",
        "cv_res.head(10)"
      ]
<<<<<<< HEAD
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get scores\n",
    "scores = cross_val_score(regressor, data, target)\n",
    "scores"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dae66af5",
   "metadata": {},
   "source": [
    "### Overfit-Generalization-Underfit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "69c42f40",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crossvalidation and scores\n",
    "cv = ShuffleSplit(n_splits=30, test_size=0.2)\n",
    "cv_results = cross_validate(regressor, data, target, cv=cv, scoring='neg_mean_absolute_error',\n",
    "                           return_train_score=True, n_jobs=2)\n",
    "cv_results = pd.DataFrame(cv_results)\n",
    "scores = pd.DataFrame()\n",
    "scores[['train_error', 'test_error']] = -cv_results[['train_score', 'test_score']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "76868af1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting error distributions\n",
    "scores.plot.hist(bins=50, edgecolor='black')\n",
    "plt.xlabel('Mean absolute error in $K')\n",
    "_ = plt.title('Train adn test error distributions - Cross-validation')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d64e667f",
   "metadata": {},
   "source": [
    "### Validation Curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fd25d7d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting val and test errors for different tree depths\n",
    "max_depth = [1, 5, 10, 15, 20, 25]\n",
    "train_scores, test_scores = validation_curve(regressor, data, target, param_name='max_depth', param_range=max_depth,\n",
    "                                            cv=cv, scoring='neg_mean_absolute_error', n_jobs=2)\n",
    "train_errors, test_errors = -train_scores, -test_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e4b20eea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting train and test error curves\n",
    "plt.plot(max_depth, train_errors.mean(axis=1), label='Trainig error')\n",
    "plt.plot(max_depth, test_errors.mean(axis=1), label='Testing error')\n",
    "plt.legend()\n",
    "\n",
    "plt.xlabel('Max. depth of decision tree')\n",
    "plt.ylabel('Mean abs. error in $K')\n",
    "_ = plt.title('Validation curve for tree')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "608915d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
=======
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0d0c246a",
      "metadata": {
        "id": "0d0c246a",
        "outputId": "dd7001fa-de16-4a33-d170-c6cc3c8aa9dc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mean cross-validation error is: $46.36K ± $1.17K\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#plot test error distribution\n",
        "sym = '\\u00B1'\n",
        "cv_res.test_error.plot.hist(bins=10, edgecolor='black')\n",
        "plt.xlabel('Mean abosulute error in (K$)')\n",
        "_ = plt.title('test error distribution')\n",
        "error = cv_res.test_error\n",
        "print(f'Mean cross-validation error is: ${error.mean():.2f}K {sym} ${error.std():.2f}K')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9777e11d",
      "metadata": {
        "id": "9777e11d",
        "outputId": "5e7b1c4f-9d05-44ab-868e-45377f0b17ef"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Standard deviation of Target distribution: $115.40K\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Plot target distribution\n",
        "target.plot.hist(bins=20, edgecolor='black')\n",
        "plt.xlabel('Median House Value in ($K)')\n",
        "_ = plt.title('Target Distribution')\n",
        "print(f'Standard deviation of Target distribution: ${target.std():.2f}K')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0c6f22d8",
      "metadata": {
        "id": "0c6f22d8",
        "outputId": "f887a8dc-fa06-495e-ad66-a7ce2bdc29d0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'fit_time': array([0.14177823, 0.11794233, 0.10562134, 0.11653352, 0.10631657]), 'score_time': array([0.00301409, 0.        , 0.        , 0.00201631, 0.        ]), 'estimator': [DecisionTreeRegressor(random_state=0), DecisionTreeRegressor(random_state=0), DecisionTreeRegressor(random_state=0), DecisionTreeRegressor(random_state=0), DecisionTreeRegressor(random_state=0)], 'test_score': array([0.26291527, 0.41947109, 0.44492564, 0.23357874, 0.40788361])}\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "[DecisionTreeRegressor(random_state=0),\n",
              " DecisionTreeRegressor(random_state=0),\n",
              " DecisionTreeRegressor(random_state=0),\n",
              " DecisionTreeRegressor(random_state=0),\n",
              " DecisionTreeRegressor(random_state=0)]"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#More regarding Cross-Validation - Check estimators\n",
        "cv = cross_validate(regressor, data, target, return_estimator=True)\n",
        "print(cv)\n",
        "cv['estimator']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0f47d01c",
      "metadata": {
        "id": "0f47d01c",
        "outputId": "9cdcd3de-a298-4531-e19d-09ac4feb91c7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0.26291527, 0.41947109, 0.44492564, 0.23357874, 0.40788361])"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Get scores\n",
        "scores = cross_val_score(regressor, data, target)\n",
        "scores"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "599bf55f",
      "metadata": {
        "id": "599bf55f"
      },
      "source": [
        "### Overfit-Generalization-Underfit"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "838f1d8f",
      "metadata": {
        "id": "838f1d8f"
      },
      "outputs": [],
      "source": [
        "# Crossvalidation and scores\n",
        "cv = ShuffleSplit(n_splits=30, test_size=0.2)\n",
        "cv_results = cross_validate(regressor, data, target, cv=cv, scoring='neg_mean_absolute_error',\n",
        "                           return_train_score=True, n_jobs=2)\n",
        "cv_results = pd.DataFrame(cv_results)\n",
        "scores = pd.DataFrame()\n",
        "scores[['train_error', 'test_error']] = -cv_results[['train_score', 'test_score']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "206ccea5",
      "metadata": {
        "id": "206ccea5",
        "outputId": "c442a565-2061-4680-9cd8-e976f0d3925a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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zJ49m549e66yT9++fRkwYAAAn//853nllVfKpr106VIeeeQRhg0btnLZhx9+uHJ62LBhdOjQoc7822+/zZIlS9hnn30AOPbYY1dJ41vf+lbzKltGboE/ImYAu5RZ/jKwW175mpk1pmvXriun77//fu69914effRRunTpwpAhQ8r+GGqdddZZOd2hQwc++OCDsmmvWLGC7t27M3369EbzLjdfSZlXl4dsMLNWt/Gmm7XoDRYbb7pZg+u7devGu+++W3bd22+/TY8ePejSpQuzZs3iscceW62yrLfeevTt25cJEyYwbNgwIoIZM2bQv3//Bvdbf/316dGjBw8++CB77703119//crWf0tz4DezVtfat1L37NmTwYMHs9NOO9G5c2c22mijleuGDh3KNddcww477MB2223HHnvssdr53XjjjXz3u9/lggsu4OOPP+aII45oNPADjB07duXF3S233JI//OEPq12WchTR7DslW82gQYOiuU/gklTv7ZxrQt3N2oPnn3+eHXbYoa2L0a6Ve40lTY2IQbW39SBtZmYF464eM7NmOvnkk3n44YdXWXbKKadw/PHHt1GJKuPAb2bWTFdeeWVbF6FZ3NVjZlYwDvxmZgXjwG9mVjAO/GbW6qr79G7R8fir+/RuML+a0Tmb49JLL+X9999v1r6fVb64a2atbs7814hz1mux9HTeaw2ur29Y5kpceumlHHXUUXTp0qW5xQNg+fLlq4zRU3u+0v1aglv8ZtbulQ7LfPrpp3PRRRex6667svPOO3POOecA8N5773HwwQfTv39/dtppJ2666SZGjRrFggUL2Hfffdl3333rTf+ee+5hzz33ZODAgQwbNoylS7OHD1ZXVzNy5EgGDhzIhAkT6syPHz+efv36sdNOOzFy5MiV6a277rqcdtpp9O/fn0cffbTFXw8HfjNr90qHZT7ggAOYPXs2TzzxBNOnT2fq1KlMnjyZu+++m0022YSnn36aZ599lqFDh/KDH/yATTbZhEmTJjFp0qSyab/55ptccMEF3HvvvUybNo1BgwatHHIZsuEipk2bxhFHHLHK/Be/+EVGjhzJ3//+d6ZPn86TTz7JbbfdBmQfQrvvvjtPP/00e+21V4u/Hg78ZlYo99xzD/fccw+77LILAwcOZNasWcyePZt+/foxceJERo4cyYMPPsj6669fUXqPPfYY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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plotting error distributions\n",
        "scores.plot.hist(bins=50, edgecolor='black')\n",
        "plt.xlabel('Mean absolute error in $K')\n",
        "_ = plt.title('Train adn test error distributions - Cross-validation')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "df2c48f0",
      "metadata": {
        "id": "df2c48f0"
      },
      "source": [
        "### Validation Curve"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0b4ed1c5",
      "metadata": {
        "id": "0b4ed1c5"
      },
      "outputs": [],
      "source": [
        "#Getting val and test errors for different tree depths\n",
        "max_depth = [1, 5, 10, 15, 20, 25]\n",
        "train_scores, test_scores = validation_curve(regressor, data, target, param_name='max_depth', param_range=max_depth,\n",
        "                                            cv=cv, scoring='neg_mean_absolute_error', n_jobs=2)\n",
        "train_errors, test_errors = -train_scores, -test_scores"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "38f8297a",
      "metadata": {
        "id": "38f8297a",
        "outputId": "a54983c0-814a-4d3e-a5d0-134dd429ae1f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Plotting train and test error curves\n",
        "plt.plot(max_depth, train_errors.mean(axis=1), label='Trainig error')\n",
        "plt.plot(max_depth, test_errors.mean(axis=1), label='Testing error')\n",
        "plt.legend()\n",
        "\n",
        "plt.xlabel('Max. depth of decision tree')\n",
        "plt.ylabel('Mean abs. error in $K')\n",
        "_ = plt.title('Validation curve for tree')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f4850c64",
      "metadata": {
        "id": "f4850c64",
        "outputId": "1600e0a3-62e7-4bf8-ba50-04daae301f7e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Plotting train and test error curves and std\n",
        "plt.errorbar(max_depth, train_errors.mean(axis=1), yerr=test_errors.std(axis=1), label='Trainig error')\n",
        "plt.errorbar(max_depth, test_errors.mean(axis=1), yerr=test_errors.std(axis=1), label='Testing error')\n",
        "plt.legend()\n",
        "\n",
        "plt.xlabel('Max. depth of decision tree')\n",
        "plt.ylabel('Mean abs. error in $K')\n",
        "_ = plt.title('Validation curve for tree')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5c27acf3",
      "metadata": {
        "id": "5c27acf3"
      },
      "outputs": [],
      "source": [
        ""
>>>>>>> 90353a69f53961855bc0113be440f31dbff68744
      ]
    }
<<<<<<< HEAD
   ],
   "source": [
    "#Plotting train and test error curves and std\n",
    "plt.errorbar(max_depth, train_errors.mean(axis=1), yerr=train_errors.std(axis=1), label='Trainig error')\n",
    "plt.errorbar(max_depth, test_errors.mean(axis=1), yerr=test_errors.std(axis=1), label='Testing error')\n",
    "plt.legend()\n",
    "\n",
    "plt.xlabel('Max. depth of decision tree')\n",
    "plt.ylabel('Mean abs. error in $K')\n",
    "_ = plt.title('Validation curve for tree')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "261aeb53",
   "metadata": {},
   "source": [
    "### Sample Size in cross-validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9c6c6bc8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.1  , 0.325, 0.55 , 0.775, 1.   ])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "train_sizes = np.linspace(0.1, 1.0, num=5, endpoint=True)\n",
    "train_sizes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c77e1ae6",
   "metadata": {},
   "outputs": [],
   "source": [
    "cv = ShuffleSplit(n_splits=30, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "917a2161",
   "metadata": {},
   "outputs": [],
   "source": [
    "results = learning_curve(regressor, data, target, train_sizes=train_sizes, cv=cv,\n",
    "                        scoring='neg_mean_absolute_error', n_jobs=2)\n",
    "train_size, train_scores, test_scores = results[:3]\n",
    "train_errors, test_errors = -train_scores, -test_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b1326f83",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.errorbar(train_size, train_errors.mean(axis=1), \n",
    "             yerr=train_errors.std(axis=1), \n",
    "             label='Training Error')\n",
    "plt.errorbar(train_size, test_errors.mean(axis=1),\n",
    "            yerr=test_errors.std(axis=1),\n",
    "            label='Testing error')\n",
    "plt.legend()\n",
    "\n",
    "plt.xscale('log')\n",
    "plt.xlabel('# of samples in training set')\n",
    "plt.ylabel('Mean absolute error in $K')\n",
    "_ = plt.title('Decision tree learning curve')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd91ce58",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
=======
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "colab": {
      "name": "Cali_Housing - cross_val.ipynb",
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
>>>>>>> 90353a69f53961855bc0113be440f31dbff68744
